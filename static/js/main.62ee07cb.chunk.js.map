{"version":3,"sources":["store/modules/categories/reducer.ts","store/modules/quote/reducer.ts","store/reducer.ts","store/store.ts","common/components/ChuckHeader/ChuckHeader.tsx","api/requests.ts","common/constants/api.ts","store/modules/quote/actions.ts","pages/Home/components/ChuckButton/ChuckButton.tsx","pages/Home/components/Categories/Categories.tsx","pages/Home/components/Quote/Quote.tsx","pages/Home/Home.tsx","store/modules/categories/actions.ts","App.tsx","index.tsx"],"names":["initialState","icon_url","value","combineReducers","categories","state","action","type","payload","quote","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ChuckHeader","props","logo","className","src","alt","width","height","instance","axios","create","baseURL","process","headers","interceptors","response","use","res","data","getQuote","category","dispatch","a","api","get","Swal","fire","icon","title","text","ChuckButton","useDispatch","onClick","Categories","map","Quote","Home","getCategories","this","getQuotesCategories","getRandomQuote","React","Component","connect","Object","values","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62ee07cb.chunk.js","sourcesContent":["const initialState = [] as string[];\r\n\r\nexport default function reducer(state = initialState, action: { type: string; payload: string[] }): string[] {\r\n  switch (action.type) {\r\n    case 'GET_CATEGORIES': {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n}\r\n","const initialState = {\r\n  icon_url: 'https://assets.chucknorris.host/img/avatar/chuck-norris.png',\r\n  value: 'Let me think.',\r\n};\r\n\r\ntype QuoteType = {\r\n  icon_url: string;\r\n  value: string;\r\n};\r\n\r\nexport default function reducer(state = initialState, action: { type: string; payload: QuoteType }): QuoteType {\r\n  switch (action.type) {\r\n    case 'GET_QUOTE': {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport categoriesReducer from './modules/categories/reducer';\r\nimport quoteReducer from './modules/quote/reducer';\r\n\r\n/**\r\n * This code combines all app reducers.\r\n */\r\nexport default combineReducers({\r\n  categories: categoriesReducer,\r\n  quote: quoteReducer,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducer';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport './header.scss';\r\n\r\ntype HeaderProps = {\r\n  logo: string;\r\n};\r\n\r\n/**\r\n * This component renders header of the Chuck Norris quotes.\r\n * @param props holds url to Chuck Norris logo\r\n * @returns jsx element with header that holds logo and title\r\n */\r\nexport default function ChuckHeader(props: HeaderProps): JSX.Element {\r\n  const { logo } = props;\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"container\">\r\n        <div className=\"header__row\">\r\n          <div className=\"header__logo\">\r\n            <img src={logo} alt=\"Chuck logo\" width={43} height={43} />\r\n          </div>\r\n          <div className=\"header__title\">Chuck Norris</div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport api from '../common/constants/api';\r\n\r\n/**\r\n * Here i create axios instance to work with requests.\r\n */\r\nconst instance = axios.create({\r\n  baseURL: api.baseURL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\ninstance.interceptors.response.use((res) => res.data);\r\n\r\nexport default instance;\r\n","/**\r\n * This file holds url for axios requests.\r\n */\r\nexport default {\r\n  baseURL: process.env.REACT_APP_API_URL || '',\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport Swal from 'sweetalert2';\r\nimport api from '../../../api/requests';\r\n\r\n/**\r\n * This function helps with getting Chuck Norris quote from the backend.\r\n * @returns promise\r\n */\r\nexport const getQuote =\r\n  (category: string) =>\r\n  async (dispatch: Dispatch): Promise<void> => {\r\n    try {\r\n      const data =\r\n        category !== 'random' ? await api.get(`/jokes/random?category=${category}`) : await api.get('/jokes/random');\r\n      await dispatch({ type: 'GET_QUOTE', payload: data });\r\n    } catch (e) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'Cant get boards list from server. Try to reload page.',\r\n      });\r\n\r\n      dispatch({ type: 'ERROR_ACTION_TYPE' });\r\n    }\r\n  };\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getQuote } from '../../../../store/modules/quote/actions';\r\nimport './chuckButton.scss';\r\n\r\n/**\r\n * This component renders button that makes request to backend to receive new quote.\r\n * Quote category comes with props.\r\n * @param props holds array with categories of Chuck Norris quotes.\r\n * @returns jsx element with button\r\n */\r\nexport default function ChuckButton(props: { category: string }): JSX.Element {\r\n  const dispatch = useDispatch();\r\n  const { category } = props;\r\n  return (\r\n    <button\r\n      onClick={async (): Promise<void> => {\r\n        await dispatch(getQuote(category));\r\n      }}\r\n      className=\"chuck__btn\"\r\n    >\r\n      {category}\r\n    </button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { ICategories } from '../../../../common/interfaces/ICategories';\r\nimport ChuckButton from '../ChuckButton/ChuckButton';\r\nimport './categories.scss';\r\n\r\n/**\r\n * This component renders categories of Chuck Norris quotes.\r\n * @param props string array with categories\r\n * @returns jsx element\r\n */\r\nexport default function Categories(props: ICategories): JSX.Element {\r\n  const { categories } = props;\r\n  return (\r\n    <section className=\"categories\">\r\n      <div className=\"container\">\r\n        <h1 className=\"categories__title\">Categories</h1>\r\n        <div className=\"categories__row\">\r\n          {categories.map((category: string) => (\r\n            <ChuckButton key={category} category={category} />\r\n          ))}\r\n          <ChuckButton key=\"random\" category=\"random\" />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './quote.scss';\r\n\r\n/**\r\n * This component renders Chuck Norris quote. Also holds Chuck Norris image that stares on the user through the screen.\r\n * @param props string with Chuck Norris quote\r\n * @returns jsx element\r\n */\r\nexport default function Quote(props: { value: string }): JSX.Element {\r\n  const { value } = props;\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"quote\">\r\n        <blockquote className=\"quote__block\">{value}</blockquote>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ChuckHeader from '../../common/components/ChuckHeader/ChuckHeader';\r\nimport { ICategories } from '../../common/interfaces/ICategories';\r\nimport { IQuote } from '../../common/interfaces/IQuote';\r\nimport { getQuotesCategories } from '../../store/modules/categories/actions';\r\nimport { getQuote } from '../../store/modules/quote/actions';\r\nimport Categories from './components/Categories/Categories';\r\nimport Quote from './components/Quote/Quote';\r\nimport './home.scss';\r\n\r\ntype PropsType = StateType & MethodsType;\r\n\r\ntype MethodsType = {\r\n  getQuotesCategories: () => Promise<void>;\r\n  getQuote: (category: string) => Promise<void>;\r\n};\r\n\r\ntype StateType = ICategories & {\r\n  quote: IQuote;\r\n};\r\n\r\n/**\r\n * This class renders home page. Page contains list of boards.\r\n */\r\nclass Home extends React.Component<PropsType, StateType> {\r\n  async componentDidMount(): Promise<void> {\r\n    const { getQuotesCategories: getCategories } = this.props;\r\n    const { getQuote: getRandomQuote } = this.props;\r\n    await getCategories();\r\n    await getRandomQuote('random');\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const { categories } = this.props;\r\n    const { quote } = this.props;\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <ChuckHeader logo={quote.icon_url} />\r\n        <Categories categories={categories} />\r\n        <Quote value={quote.value} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: PropsType): StateType => {\r\n  const { categories } = state;\r\n  const { quote } = state;\r\n  return { categories: Object.values(categories), quote };\r\n};\r\n\r\nexport default connect(mapStateToProps, { getQuotesCategories, getQuote })(Home);\r\n","import { Dispatch } from 'redux';\r\nimport Swal from 'sweetalert2';\r\nimport api from '../../../api/requests';\r\n\r\n/**\r\n * This function helps with getting quotes categories array from the backend.\r\n * @returns promise\r\n */\r\nexport const getQuotesCategories =\r\n  () =>\r\n  async (dispatch: Dispatch): Promise<void> => {\r\n    try {\r\n      const data = await api.get('/jokes/categories');\r\n      await dispatch({ type: 'GET_CATEGORIES', payload: data });\r\n    } catch (e) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'Cant get categories list from server. Try to reload page.',\r\n      });\r\n      dispatch({ type: 'ERROR_ACTION_TYPE' });\r\n    }\r\n  };\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from './pages/Home/Home';\r\n\r\n/**\r\n * This is main component of the application.\r\n * @returns jsx element\r\n */\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <Router>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n        </Switch>\r\n      </main>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}